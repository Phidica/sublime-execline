#! SYNTAX TEST "Packages/execline/execline.sublime-syntax"

foreground { echo out }
#! ^^^^^^^^^^^^^^^^^^^^^ meta.function-call
#!          ^^^^^^^^^^ meta.function-call meta.function-call
#! ^^^^^^^ meta.function-call.name keyword.other.state.foreground meta.string.unquoted
#!         ^^^^^^^^^^^^ meta.braces.block.run.program
#!         ^ punctuation.section.braces.begin
#!           ^^^^ meta.function-call.name variable.function meta.string.unquoted
#!                ^^^ meta.function-call.parameter.argument meta.string.unquoted
#!                    ^ punctuation.section.braces.end

# comment
#!<- comment.line

foreground # comment
#!         ^^^^^^^^^^ comment.line
{ # comment
#!<- punctuation.section.braces.begin
  echo # comment
#!^^^^ meta.function-call.name variable.function meta.string.unquoted
#!     ^^^^^^^^^^ comment.line
  out # comment
#!^^^ meta.function-call.parameter.argument meta.string.unquoted
#!    ^^^^^^^^^^ comment.line
} # comment
# comment
#!<- comment.line

foreground { echo one} {two }\  \ } }
#!                ^^^^ meta.string.unquoted
#!                   ^ - punctuation
#!                     ^^^^ meta.string.unquoted
#!                     ^ - punctuation
#!                          ^ - punctuation
#!                                ^ - punctuation
#!                                  ^ punctuation.section.braces.end

foreground { echo {} { indented } {
#!                ^^ meta.string.unquoted
#!                ^^ - punctuation
#!                   ^^^^^^^^^^^^ meta.braces.block.plain
#!                   ^ meta.string.unquoted
#!                   ^ - punctuation
#!                              ^ meta.string.unquoted
#!                              ^ - punctuation
#!                                ^ meta.braces.block.plain
# comment
#!<- comment.line
  { a }
#!^^^^^ meta.braces.block.plain meta.braces.block.plain
}  }
#! ^ punctuation.section.braces.end

foreground {
  echo arg { arg } { arg } arg
  #! ^^^^^^^^^^^^^^^^^^^^^^^^^ meta.function-call meta.function-call
  #!                       ^^^ meta.function-call.parameter.argument
}

foreground {}
#!         ^^ invalid.illegal.block

# comment
#!<- comment.line

foreground { }
#!         ^^^ meta.function-call.block meta.braces.block.run.program

# comment
#!<- comment.line

foreground { echo str1 2 3str }
#!                ^^^^ meta.string.unquoted
#!                   ^ - constant.numeric
#!                     ^ meta.string.unquoted constant.numeric
#!                       ^ - constant.numeric
#!                       ^^^^ meta.string.unquoted

foreground { echo 1 1.2 .3 4. . }
#!                ^ constant.numeric
#!                  ^^^ constant.numeric
#!                      ^^ constant.numeric
#!                         ^^ constant.numeric
#!                            ^ - constant.numeric

foreground { echo --arg -arg arg } foreground { echo arg # comment
#!                ^^^^^ meta.function-call.parameter.option.long variable.parameter
#!                      ^^^^ meta.function-call.parameter.option.short variable.parameter
#!                           ^^^ meta.function-call.parameter.argument
#!                               ^ meta.braces.block.run.program punctuation.section.braces.end
#!                                              ^^^^ meta.function-call.name variable.function
#!                                              ^^^^^^^^ meta.function-call
#!                                                       ^ punctuation.definition.comment
#!                                                       ^^^^^^^^^ comment.line
}

foreground { echo a=a -a=a --a=a }
#!                ^^^ meta.string.unquoted
#!                    ^^^^ meta.function-call.parameter.option.short variable.parameter meta.string.unquoted
#!                    ^ punctuation.definition.option.short
#!                      ^ - punctuation.definition.option.long.separator
#!                         ^^^^^ meta.function-call.parameter.option.long meta.string.unquoted
#!                         ^^ meta.function-call.parameter.option.long variable.parameter punctuation.definition.option.long.begin
#!                            ^ meta.function-call.parameter.option.long variable.parameter punctuation.definition.option.long.separator

foreground { echo - 1 }
#!                ^ - variable.parameter

foreground { echo =
}
#!<- punctuation.section.braces.end

foreground { echo --== }
foreground { echo }
#!           ^^^^ variable.function

foreground { = arg }
#!           ^ variable.function meta.string.unquoted
#!             ^^^ meta.function-call.parameter.argument

foreground { echo --num=2 -n2 }
#!                ^^^^^^ meta.string.unquoted
#!                      ^ meta.function-call.parameter.option.long constant.numeric
#!                          ^ - constant.numeric

foreground { cmd -h --help -- -- -h # comment
#!           ^^^^^^^^^^^^^^^^^^^^^^ meta.function-call
#!               ^^ meta.function-call.parameter.option.short variable.parameter
#!                  ^^^^^^ meta.function-call.parameter.option.long variable.parameter
#!                         ^^ meta.function-call.parameter.option.end variable.parameter punctuation.definition.option.end meta.string.unquoted
#!                            ^^ - variable.parameter
#!                               ^^ - variable.parameter
#!                                  ^^^^^^^^^ comment.line
}

foreground { 1 arg -1 +1 -- -1. +.0 }
#!           ^ - constant.numeric
#!                 ^^ meta.function-call.parameter.option.short variable.parameter
#!                 ^^ - constant.numeric
#!                    ^^ constant.numeric
#!                          ^^^ constant.numeric
#!                              ^^^ constant.numeric

foreground { echo "one" 'two'' --opt="string" }
#!                ^^^^^ string.quoted
#!                ^ punctuation.definition.string.begin
#!                    ^ punctuation.definition.string.end
#!                      ^^^^^^ meta.string.unquoted
#!                                   ^^^^^^^^ meta.function-call.parameter.option.long string.quoted

foreground { echo "
# notacomment" "\0x41\66\0103D\n" "\a\b\c\d\e"
#!<- string.quoted
#!<- - comment
#!              ^^^^^^^^^^^^^ constant.character.escape.ascii
#!                            ^^ constant.character.escape.ascii
#!                                 ^^^^ constant.character.escape.ascii
#!                                     ^^^^^^ constant.character.escape.other
"quote in my quote \""
#!                 ^^ constant.character.escape.other
#!                   ^ string.quoted punctuation.definition.string.end
single"\
#!     ^^ string.quoted constant.character.escape.newline
"word
}

foreground { echo \} \$ \\ \{}
#!                ^^ constant.character.escape.other
#!                   ^^ constant.character.escape.other
#!                      ^^ constant.character.escape.other
#!                         ^^ constant.character.escape.other
#!                           ^ - punctuation
  bar \
# notacomment
#!<- meta.string.unquoted
  baz \
#!    ^^ constant.character.escape.newline
}

foreground { echo $var ${var}arg $$var ${${var}arg}arg }
#!                ^^^^ variable.other.bare meta.string.unquoted
#!                ^ punctuation.definition.variable.sign
#!                     ^^^^^^ variable.other.braces meta.string.unquoted
#!                     ^ punctuation.definition.variable.sign
#!                      ^ punctuation.definition.variable.begin
#!                          ^ punctuation.definition.variable.end
#!                           ^^^ - variable
#!                               ^^^^^ variable.other.bare meta.string.unquoted
#!                                     ^^^^^^^^^^^^ variable.other.braces meta.string.unquoted
#!                                     ^^^^^^^^^^^^^^^ - meta.string.unquoted meta.string.unquoted
#!                                             ^^^^^^^ - variable variable

foreground { echo ${$var}iable $var"{arst" }
#!                       ^^^^^ - variable
#!                                  ^^^^^ - variable

foreground { echo ${var{} arg ${wont work} ${ nope} }
#!                  ^^^^^ variable.other.braces
#!                        ^ - variable.other
#!                                  ^^^^^^ - variable.other.braces
#!                                   ^^^^^ meta.string.unquoted
#!                                         ^^ variable.other.braces meta.string.unquoted
#!                                           ^^^^^^ - variable.other.braces
#!                                           ^ - meta.string.unquoted

foreground {
  echo $\v\a\r ${\v\a\r} ${"var"iable}
#!      ^^^^^^ meta.string.unquoted constant.character.escape.other
#!      ^^^^^^ - meta.string.unquoted meta.string.unquoted
#!               ^^^^^^ meta.string.unquoted constant.character.escape.other
#!                         ^^^^^ variable.other.braces string.quoted
#!                         ^^^^^ - meta.string.unquoted
#!                              ^ - string.quoted
  $\
var
#!<- variable.other.bare meta.string.unquoted
  $\
#! ^^ variable.other.bare meta.string.unquoted constant.character.escape.newline
  ${\
#!  ^^ variable.other.braces meta.string.unquoted constant.character.escape.newline
}

foreground { echo $var"iable" arg $"var"iable ${var"iable}arg" }
#!                ^^^^^^^^^^^ variable.other.bare
#!                ^^^^ meta.string.unquoted
#!                    ^^^^^^^ string.quoted
#!                    ^^^^^^^ - meta.string.unquoted
#!                            ^^^ - variable.other
#!                            ^^^ - string.quoted
#!                                ^^^^^^^^^^^ variable.other.bare
#!                                ^ meta.string.unquoted
#!                                ^ - string.quoted
#!                                 ^^^^^ string.quoted
#!                                 ^^^^^ - meta.string.unquoted
#!                                      ^^^^^ meta.string.unquoted
#!                                      ^^^^^ - string.quoted
#!                                                       ^ string.quoted punctuation.definition.variable.end
#!                                                        ^^^^ string.quoted
#!                                                        ^^^^ - variable

# TODO: '=' isn't matched as a separator because it doesn't have the power to escape the variable sub context
foreground { echo --${opt}=2 ${var=iable} }
#!                ^^^^^^^^^ meta.function-call.parameter.option.long variable.parameter
#!                  ^^^^^^ variable.other.braces
#!                           ^^^^^^^^^^^^ variable.other.braces

foreground { echo "$var" "${var}" "${$var}" "$$var" "${${var}}" }
#!                ^^^^^^ string.quoted
#!                 ^^^^ variable.other.bare
#!                 ^ punctuation.definition.variable.sign
#!                      ^ - string.quoted
#!                       ^^^^^^^^ string.quoted
#!                        ^^^^^^ variable.other.braces
#!                        ^ punctuation.definition.variable.sign
#!                         ^ punctuation.definition.variable.begin
#!                             ^ punctuation.definition.variable.end
#!                               ^ - string.quoted
#!                                 ^^^^^^^ variable.other.braces
#!                                   ^^^^ variable.other.braces variable.other.bare
#!                                       ^ punctuation.definition.variable.end
#!                                         ^ - string.quoted
#!                                           ^^^^^ variable.other.bare
#!                                                 ^ - string.quoted
#!                                                   ^^^^^^^^^ variable.other.braces
#!                                                     ^^^^^^ variable.other.braces variable.other.braces
#!                                                             ^ - string.quoted

foreground {
  echo "$\v\a\r" "${\v\a\r}"
#!       ^^^^^^ string.quoted constant.character.escape.ascii
#!                  ^^^^^^ string.quoted constant.character.escape.ascii
  "$\
var"
#!<- variable.other.bare string.quoted
  "$\
#!  ^^ variable.other.bare string.quoted constant.character.escape.newline
"
  "${\
#!   ^^ variable.other.braces string.quoted constant.character.escape.newline
}"
}

foreground { echo "$var iable" "$var"iable "$"var"iable" "${"var"}" }
#!                 ^^^^^^^^^^ variable.other.bare string.quoted
#!                            ^ - string.quoted
#!                             ^^^^^^ string.quoted
#!                              ^^^^^^^^^^ variable.other.bare
#!                                   ^^^^^ meta.string.unquoted
#!                                   ^^^^^ - string.quoted
#!                                          ^^^^^^^^^^^ variable.other.bare
#!                                          ^^^^^^^^^^^ - variable.other.bare variable.other.bare
#!                                            ^^^ meta.string.unquoted
#!                                            ^^^ - string.quoted
#!                                               ^^^^^^^ - meta.string.unquoted
#!                                                        ^^^^^^^^ variable.other.braces
#!                                                        ^^^^^^^^ - variable.other.braces variable.other.braces
#!                                                           ^^^ - string.quoted

foreground { echo "${"var}str "${v"ar}str "${" str }
#!                 ^^^^^^^ variable
#!                        ^^^ - variable
#!                             ^^^^^^^ variable
#!                                    ^^^ - variable
#!                                             ^^^ - variable

foreground { echo "${${$var}}s"tr "${$va"r}str }
#!                 ^^^^^^^^^^ variable.other.braces
#!                   ^^^^^^^ variable.other.braces variable.other.braces
#!                     ^^^^ variable.other.braces variable.other.braces variable.other.bare
#!                         ^ punctuation.definition.variable.end
#!                          ^ punctuation.definition.variable.end
#!                           ^^^^ - variable
#!                                 ^^^^^^^^ variable.other.braces
#!                                   ^^^^^ variable.other.braces variable.other.bare
#!                                        ^ punctuation.definition.variable.end
#!                                         ^^^ - variable

foreground { echo $foo{} {$foo} "$foo{}" "{$foo}bar" "${foo{}" }
#!                    ^^ - variable.other
#!                       ^ - variable.other
#!                            ^ - variable.other
#!                                   ^^^ string.quoted
#!                                   ^^^ - variable.other
#!                                   ^^^ - meta.string.unquoted
#!                                             ^^^^^ string.quoted
#!                                             ^^^^^ - variable.other
#!                                             ^^^^^ - meta.string.unquoted
#!                                                      ^^^^^ variable.other.braces

foreground { echo "${foo} bar" baz }
#!                       ^^^^^ string.quoted
#!                       ^ - variable.other
#!                             ^^^ meta.string.unquoted

foreground { echo $var"ia}ble" }
#!                       ^^^^^ - variable

foreground { $cmd out --opt="$setting1" -a$setting2 -- $param }
#!           ^^^^ meta.function-call.name variable.function variable.other.bare meta.string.unquoted
#!                           ^^^^^^^^ meta.function-call.parameter.option.long variable.other.bare string.quoted
#!                                        ^^^^^^^^^ meta.function-call.parameter.option.short variable.parameter variable.other.bare meta.string.unquoted
#!                                                     ^^^^^^ meta.function-call.parameter.argument variable.other.bare meta.string.unquoted

foreground { "$cmd" out }
#!            ^^^^ meta.function-call.name variable.function variable.other.bare string.quoted

background -d { echo out }
#! ^^^^^^^^^^^^^^^^^^^^^^^^ meta.function-call
#! ^^^^^^^ meta.function-call.name keyword.other.state.background meta.string.unquoted
#!         ^^ meta.function-call.parameter.option.short variable.parameter
#!            ^ punctuation.section.braces.begin

background {}
#!         ^^ invalid.illegal.block

foreground
#
{
#!<-punctuation.section.braces.begin
  background
#!^^^^^^^^^^ meta.function-call.name keyword.other.state
  -d
#!^^ meta.function-call.parameter.option.short variable.parameter
  {
#!^punctuation.section.braces.begin
    echo
#!  ^^^^ variable.function
  }
#!^ punctuation.section.braces.end
}
#!<- punctuation.section.braces.end

foreground { runblock 1 echo > }
#!           ^^^^^^^^ meta.function-call.name support.function.scripting.runblock meta.string.unquoted
#!                    ^ meta.function-call.parameter.argument
#!                      ^^^^ meta.function-call.name variable.function meta.string.unquoted

foreground { runblock -d -n 3 1 echo > }
#!                    ^^ meta.function-call.parameter.option.short
#!                       ^^ meta.function-call.parameter.option.short
#!                          ^ meta.function-call.parameter.argument
#!                            ^ meta.function-call.parameter.argument
#!                              ^^^^ variable.function

foreground { runblock -d 1 echo > }
#!                    ^^ meta.function-call.parameter.option.short
#!                       ^ meta.function-call.parameter.argument
#!                         ^^^^ variable.function

foreground {
  runblock
#!^^^^^^^^ support.function.scripting.runblock
  -d
#!^^ meta.function-call.parameter.option.short
  -n
#!^^ meta.function-call.parameter.option.short
  3
#!^ meta.function-call.parameter.argument
  1
#!^ meta.function-call.parameter.argument
  echo >
#!^^^^ variable.function
}

foreground { runblock 1 background { echo bg } echo > }
#!           ^^^^^^^^ meta.function-call.name support.function.scripting meta.string.unquoted
#!                    ^ meta.function-call.parameter.argument
#!                      ^^^^^^^^^^ meta.function-call.name keyword.other.state
#!                                 ^ punctuation.section.braces.begin
#!                                           ^ punctuation.section.braces.end
#!                                             ^^^^ variable.function

foreground { runblock -n3 1 echo > }
#!                    ^^meta.function-call.parameter.option.short
#!                      ^ meta.function-call.parameter.argument
#!                        ^ meta.function-call.parameter.argument
#!                          ^^^^ variable.function

foreground { runblock -d -- -1 echo > }
#!                       ^^ meta.function-call.parameter.option.end
#!                          ^^ - meta.function-call.parameter.option
#!                             ^^^^ variable.function

foreground { exec -a argv0 -l echo }
#!           ^^^^ support.function.state.exec
#!                   ^^^^^ meta.function-call.parameter.argument
#!                         ^^ meta.function-call.parameter.option.short
#!                            ^^^^ variable.function

foreground { execline-cd -L echo }
#!           ^^^^^^^^^^^ support.function.state.execline-cd
#!                       ^^ - meta.function-call.parameter.option
#!                          ^^^^ variable.function

foreground { posix-cd -L dir echo }
#!           ^^^^^^^^ support.function.state.posix-cd
#!                    ^^ meta.function-call.parameter.option
#!                       ^^^ meta.function-call.parameter.argument
#!                           ^^^^ variable.function

foreground { cd -L dir echo }
#!           ^^ support.function.state.cd
#!              ^^ meta.function-call.parameter.option
#!                 ^^^ meta.function-call.parameter.argument
#!                     ^^^^ variable.function

foreground { execline-umask 0022 echo }
#!           ^^^^^^^^^^^^^^ support.function.state.execline-umask
#!                          ^^^^ meta.function-call.parameter.argument.numeric meta.string.unquoted constant.numeric
#!                               ^^^^ variable.function

foreground { posix-umask -S 0022 }
#!           ^^^^^^^^^^^ support.function.state.posix-umask
#!                       ^^ meta.function-call.parameter.option
#!                          ^^^^ - variable.function

foreground { umask -S u=rwx,g=rx,o=rx echo }
#!           ^^^^^ support.function.state.umask
#!                 ^^ meta.function-call.parameter.option
#!                    ^^^^^^^^^^^^^^^ meta.function-call.parameter.argument
#!                                    ^^^^ variable.function

foreground { wait }
#!           ^^^^ support.function.state.wait
#!                ^ punctuation.section.braces.end

foreground { wait 1 2 3 echo }
#!                ^ constant.numeric
#!                  ^ constant.numeric
#!                    ^ constant.numeric
#!                      ^ - variable.function

foreground { wait 1 {
#!                  ^ - punctuation.section.braces.begin
# comment
#!<- comment.line
  echo } # Braces still need balancing
#!^^^^ - variable.function
}
#!<- punctuation.section.braces.end

foreground { wait -i -t9 { 1
#!                       ^ punctuation.section.braces.begin
#!                         ^ constant.numeric
# comment
#!<- comment.line
  2 3 } echo }
#!^ constant.numeric
#!  ^ constant.numeric
#!    ^ punctuation.section.braces.end
#!      ^^^^ variable.function

foreground { wait -t#
#!                  ^ - comment.line
  -t # comment
#!^^ meta.function-call.parameter.option.short variable.parameter
#!   ^ punctuation.definition.comment
1 }
#!^ punctuation.section.braces.end

foreground { trap
#!           ^^^^ support.function.state.trap
  {
#!^ meta.braces.block.trap punctuation.section.braces.begin
  hup
#!^^^ meta.braces.block.trap meta.function-call.parameter.argument constant.language.sigcode
    {
#!  ^ punctuation.section.braces.begin
      true
#!    ^^^^ variable.function
    }
#!  ^ punctuation.section.braces.end
  HUP { true } hUp { true } hups { true }
#!^^^ constant.language.sigcode
#!             ^^^ constant.language.sigcode
#!                          ^^^^ invalid.illegal.constant.language.sigcode
  siGkiLl { true } sigkills { true } 9kill { true } sig { true }
#!^^^^^^^ constant.language.sigcode
#!                 ^^^^^^^^ invalid.illegal.constant.language.sigcode
#!                                   ^^^^^ invalid.illegal.constant.language.sigcode
#!                                                  ^^^ invalid.illegal.constant.language.sigcode
  0 { true } 1 { true } 31 { true } 64 { true } 111 { true } 65 { true }
#!^ constant.language.sigcode
#!           ^ constant.language.sigcode
#!                      ^^ constant.language.sigcode
#!                                  ^^ constant.language.sigcode
#!                                              ^^^ invalid.illegal.constant.language.sigcode
#!                                                           ^^ invalid.illegal.constant.language.sigcode
  timeout { true } tImEoUt { true } timeouts { true } 1timeout { true }
#!^^^^^^^ constant.language.sigcode
#!                 ^^^^^^^ constant.language.sigcode
#!                                  ^^^^^^^^ invalid.illegal.constant.language.sigcode
#!                                                    ^^^^^^^^ invalid.illegal.constant.language.sigcode
  1 {}
#!  ^^ invalid.illegal.block
  } sleep 5
#!^ punctuation.section.braces.end
#!  ^^^^^ variable.function
}

foreground { trap {} echo out }
#!                ^^ invalid.illegal.block

if
#!<- keyword.control.conditional.if
  -X
#!^^ meta.function-call.parameter.option.short
  -n
#!^^ meta.function-call.parameter.option.short
  -x
#!^^ meta.function-call.parameter.option.short
  0
#!^ meta.function-call.parameter.argument.numeric
  { true }
#!^ punctuation.section.braces.begin
#!  ^^^^ variable.function
#!       ^ punctuation.section.braces.end

ifelse -X { true } { echo true }
#!<- keyword.control.conditional.ifelse
#!     ^^ meta.function-call.parameter.option.short
#!        ^ punctuation.section.braces.begin
#!          ^^^^ variable.function
#!               ^ punctuation.section.braces.end
#!                 ^ punctuation.section.braces.begin
#!                   ^^^^ variable.function
#!                             ^ punctuation.section.braces.end

ifte -n {
#!<- keyword.control.conditional.ifte
#!   ^^ meta.function-call.parameter.option.short
#!      ^ punctuation.section.braces.begin
  echo done
#!^^^^ variable.function
}
#<- punctuation.section.braces.end
{
#!<- punctuation.section.braces.begin
  echo fail
#!^^^^ variable.function
}
#!<- punctuation.section.braces.end

ifthenelse { true } {
#!<- keyword.control.conditional.ifthenelse
#!                ^ punctuation.section.braces.end
#!                  ^ punctuation.section.braces.begin
  echo true
#!^^^^ variable.function
} { echo false }
#!<- punctuation.section.braces.end
#!^ punctuation.section.braces.begin
#!  ^^^^ variable.function
#!             ^ punctuation.section.braces.end

tryexec -l { ./LICENSE }
#!<- meta.function-call.name keyword.control.conditional.tryexec meta.string.unquoted
#!      ^^ meta.function-call.parameter.option.short
#!                     ^ punctuation.section.braces.end

forx -p -o 1,2 i { words }
#!<- meta.function-call.name keyword.control.loop.forx meta.string.unquoted
#!             ^ meta.function-call.parameter.argument variable.other.assignment meta.string.unquoted
#!               ^ punctuation.section.braces.begin
#!                 ^^^^^ meta.function-call.parameter.argument
#!                       ^ punctuation.section.braces.end

forstdin -d, j
#!<- meta.function-call.name keyword.control.loop.forstdin meta.string.unquoted
#!       ^^ meta.function-call.parameter.option.short variable.parameter
#!         ^ meta.function-call.parameter.argument meta.string.unquoted
#!           ^ meta.function-call.parameter.argument variable.other.assignment

forbacktickx -o 1 k { gen }
#!<- meta.function-call.name keyword.control.loop.forbacktickx meta.string.unquoted
#!                ^ meta.function-call.parameter.argument variable.other.assignment
#!                    ^^^ variable.function

loopwhilex -o 0 foreground { echo }
#!<- meta.function-call.name keyword.control.loop.loopwhilex meta.string.unquoted
#!              ^^^^^^^^^^ meta.function-call.name

fdclose 1
#!<- meta.function-call.name keyword.other.redirection.fdclose meta.string.unquoted
#!      ^ meta.function-call.parameter.argument.numeric constant.numeric

fdblock -n 2
#!<- keyword.other.redirection.fdblock
#!      ^^ meta.function-call.parameter.option.short
#!         ^ constant.numeric

fdmove
#!<- keyword.other.redirection.fdmove
  -c
#!^^ meta.function-call.parameter.option.short
  1
#!^ constant.numeric
  2
#!^ constant.numeric

fdswap
#!<- keyword.other.redirection.fdswap
  1 2
#!^ constant.numeric
#!  ^ constant.numeric

fdreserve 3
#!<- keyword.other.redirection.fdreserve
#!        ^ constant.numeric

redirfd -rwnb 1 myfile
#!<- keyword.other.redirection.redirfd
#!      ^^^^^ meta.function-call.parameter.option.short
#!            ^ meta.function-call.parameter.argument.numeric
#!              ^^^^^^ meta.function-call.parameter.argument

pipeline -r { echo out }
#!<- keyword.other.redirection.pipeline
#!       ^^ meta.function-call.parameter.option.short
#!          ^ punctuation.section.braces.begin
#!            ^^^^ variable.function
#!                     ^ punctuation.section.braces.end

piperw $fdr $fdw
#!<- keyword.other.redirection.piperw
#!     ^^^^ meta.function-call.parameter.argument variable.other
#!          ^^^^ meta.function-call.parameter.argument variable.other

heredoc 0 "I'm here, doc"
#!<- keyword.other.redirection.heredoc
#!      ^ meta.function-call.parameter.argument.numeric
#!        ^^^^^^^^^^^^^^^ meta.function-call.parameter.argument

foreground { emptyenv -cP echo }
#!           ^^^^^^^^ support.function.variable.emptyenv
#!                    ^^^ variable.parameter
#!                        ^^^^ variable.function

foreground { envfile -myfile echo }
#!           ^^^^^^^ support.function.variable.envfile
#!                   ^ - variable/parameter
#!                           ^^^^ variable.function meta.string.unquoted

export
#!<- keyword.other.variable.export
  MY_VAR
#!^^^^^^ meta.function-call.parameter.argument variable.other.assignment meta.string.unquoted
  value${foo}bar
#!^^^^^^^^^^^^^^ meta.function-call.parameter.argument meta.string.unquoted
#!     ^^^^^^ variable.other.braces

unexport MY_VAR
#!<- keyword.other.variable.unexport
#!       ^^^^^^ variable.other.assignment

getcwd CWD
#!<- keyword.other.variable.getcwd
#!     ^^^ variable.other.assignment

getpid PID
#!<- keyword.other.variable.getpid
#!     ^^^ variable.other.assignment

withstdinas -D -n -n MY_VAR
#!<- keyword.other.variable.withstdinas
#!          ^^ variable.parameter
#!             ^^ - variable.parameter
#!                ^^ variable.parameter
#!                   ^^^^^^ meta.function-call.parameter.argument variable.other.assignment

backtick -n MY_VAR { echo out }
#!<- keyword.other.variable.backtick
#!          ^^^^^^ meta.function-call.parameter.argument variable.other.assignment
#!                 ^ punctuation.section.braces.begin
#!                   ^^^^ variable.function
#!                            ^ punctuation.section.braces.end

foreground { define -C -d, var out echo $var }
#!           ^^^^^^ support.function.variable.define
#!                     ^^ variable.parameter
#!                       ^ - variable.parameter
#!                         ^^^ meta.function-call.parameter.argument variable.other.assignment
#!                             ^^^ meta.function-call.parameter.argument
#!                                 ^^^^ variable.function

foreground { define -- -- foobar echo $-- }
#!                     ^^ meta.function-call.parameter.argument variable.other.assignment
#!                               ^^^^ variable.function
#!                                    ^^^ variable.other.bare

foreground { importas -u var MY_VAR echo $var }
#!           ^^^^^^^^ support.function.variable.importas
#!                    ^^ variable.parameter
#!                       ^^^ meta.function-call.parameter.argument variable.other.assignment
#!                           ^^^^^^ meta.function-call.parameter.argument variable.other.assignment
#!                                  ^^^^ variable.function


foreground { elglob -v var *s*t?r${var}[!a-b][^a] }
#!           ^^^^^^ support.function.variable.elglob
#!                     ^^^ variable.other.assignment
#!                         ^^^^^^^^^^^^^^^^^^ meta.function-call.parameter.argument.glob meta.string.unquoted
#!                         ^ keyword.operator.glob.asterisk
#!                           ^ keyword.operator.glob.asterisk
#!                             ^ keyword.operator.glob.question-mark
#!                               ^^^^^^ variable.other.braces
#!                                     ^^^^^^ meta.brackets.glob.bracketexp
#!                                     ^ keyword.operator.glob.bracketexp.begin
#!                                      ^ keyword.operator.glob.bracketexp.invert
#!                                        ^ keyword.operator.glob.bracketexp.range
#!                                          ^ keyword.operator.glob.bracketexp.end
#!                                            ^ keyword.operator.glob.bracketexp.invert

# Don't break handling of these chars in variables
foreground { echo $? ${*} $[] }
#!                ^^ variable.other.bare
#!                   ^^^^ variable.other.braces
#!                        ^^^ variable.other.bare

foreground { elglob -w var []a*[?] }
#!                         ^^^^^^^ meta.string.unquoted
#!                          ^^^^^ - keyword.operator.glob

foreground { elglob -s var [!---] }
#!                         ^^^^^^ meta.string.unquoted
#!                           ^ - keyword.operator.glob.bracketexp.range
#!                            ^ keyword.operator.glob.bracketexp.range
#!                             ^ - keyword.operator.glob.bracketexp.range

foreground { elglob -m var [] elglob var [!] }
#!                         ^^ meta.string.unquoted
#!                         ^^ - keyword.operator.glob.bracketexp
#!                            ^^^^^^ support.function.variable.elglob
#!                                       ^^^ meta.string.unquoted
#!                                       ^^^ - keyword.operator.glob.bracketexp

foreground { elglob -e var [[.a.]-[=á=]\ [:alpha:]] }
#!                         ^^^^^^^^^^^^^^^^^^^^^^^^ meta.string.unquoted
#!                          ^^^^^ constant.language.glob.collating-symbol
#!                               ^ keyword.operator.glob.bracketexp.range
#!                                ^^^^^ constant.language.glob.equivalence-class
#!                                     ^^ constant.character.escape.other
#!                                       ^^^^^^^^^ constant.language.glob.character-class

foreground { elglob -0 var [][.-.]-0] }
#!                         ^^^^^^^^^^ meta.string.unquoted
#!                          ^ - keyword.operator.glob.bracketexp
#!                           ^^^^^ constant.language.glob.collating-symbol
#!                                ^ keyword.operator.glob.bracketexp.range

foreground {
  elglob var *s*t?r${var}*[][.a.]-[=á=][:alpha:]]
#!           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ meta.string.unquoted
#!                        ^^^^^^^^^^^^^^^^^^^^^^^ meta.brackets.glob.bracketexp
  echo $var *s*t?r${var}[!a-b][^a]
#!     ^^^^ variable.other.bare
#!          ^^^^^^ - keyword.operator.glob
#!                ^^^^^^ variable.other.braces
#!                      ^^^^^^^^^^ - keyword.operator.glob
}
#!<- punctuation.section.braces.end
